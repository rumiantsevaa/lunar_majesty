name: Update Dynamic Content on Site

on:
  workflow_run:
    workflows: ["Moon Data Parser and Processor"]
    types:
      - completed
  workflow_dispatch:

jobs:
  get-latest-artifact:
    runs-on: ubuntu-latest
    outputs:
      run_id: ${{ steps.fetch.outputs.run_id }}
    steps:
      - name: Checkout repo
        uses: actions/checkout@v4
        with:
          token: ${{ secrets.PAT_FOR_LUNAR_MAJESTY_DATA_UPDATE }}
        
      - name: Get latest successful run ID of parser workflow
        id: fetch
        run: |
          echo "üì° Fetching latest successful run ID..."
          run_id=$(gh run list \
            --workflow="parse+process.yml" \
            --branch=main \
            --json databaseId,status,conclusion \
            --jq '[.[] | select(.status=="completed" and .conclusion=="success")][0].databaseId')
          
          if [ -z "$run_id" ] || [ "$run_id" = "null" ]; then
            echo "‚ùå No successful run found"
            exit 1
          fi
          
          echo "Found run_id=$run_id"
          echo "run_id=$run_id" >> "$GITHUB_OUTPUT"
        env:
          GH_TOKEN: ${{ secrets.PAT_FOR_LUNAR_MAJESTY_DATA_UPDATE }}

  update-site-content:
    needs: get-latest-artifact
    runs-on: ubuntu-latest
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
        with:
          token: ${{ secrets.PAT_FOR_LUNAR_MAJESTY_DATA_UPDATE }}
          
      - name: Download artifact from previous run
        uses: dawidd6/action-download-artifact@v4
        with:
          workflow: parse+process.yml
          run_id: ${{ needs.get-latest-artifact.outputs.run_id }}
          name: moon-data-processed
          path: ./artifacts
          
      - name: Verify artifact contents
        run: |
          echo "üìÅ Verifying artifact contents..."
          if [ -f "./artifacts/moon_data_processed.json" ]; then
            echo "‚úÖ Artifact found"
            echo "üìÑ Sample content:"
            cat ./artifacts/moon_data_processed.json | jq . | head -20
          else
            echo "‚ùå Artifact file not found!"
            ls -la ./artifacts/
            exit 1
          fi
          
      - name: Extract and format data
        id: extract_data
        run: |
          DATA_FILE="./artifacts/moon_data_processed.json"
          
          # –ò–∑–≤–ª–µ–∫–∞–µ–º –¥–∞–Ω–Ω—ã–µ –∏ —ç–∫—Ä–∞–Ω–∏—Ä—É–µ–º –¥–ª—è JavaScript
          moon_today=$(jq -r '.moon_today.moon_today | "\(.current_time)\nüåô Phase: \(.moon_phase_tonight)\nNew Moon: \(.new_moon)\nFirst Quarter: \(.first_quarter)"' "$DATA_FILE" | sed 's/"/\\"/g' | sed 's/$/\\n/' | tr -d '\n' | sed 's/\\n$//')
          
          moon_dream=$(jq -r '.moon_dream.moon_dream.time_translated' "$DATA_FILE" | sed 's/"/\\"/g')
          
          inspiration=$(jq -r '.inspiration.inspiration | "\(.content)\n\n‚Äî \(.author)"' "$DATA_FILE" | sed 's/"/\\"/g' | sed 's/$/\\n/' | tr -d '\n' | sed 's/\\n$//')
          
          # –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –æ–∫—Ä—É–∂–µ–Ω–∏—è
          echo "MOON_TODAY<<EOF" >> $GITHUB_ENV
          echo "$moon_today" >> $GITHUB_ENV
          echo "EOF" >> $GITHUB_ENV
          
          echo "MOON_DREAM<<EOF" >> $GITHUB_ENV
          echo "$moon_dream" >> $GITHUB_ENV
          echo "EOF" >> $GITHUB_ENV
          
          echo "INSPIRATION<<EOF" >> $GITHUB_ENV
          echo "$inspiration" >> $GITHUB_ENV
          echo "EOF" >> $GITHUB_ENV
          
          echo "‚úÖ Data extracted and formatted"
          
      - name: Update JavaScript file
        run: |
          JS_FILE="js/lunar_majesty.js"
          
          echo "üîÑ Updating JavaScript file..."
          
          # –°–æ–∑–¥–∞–µ–º –≤—Ä–µ–º–µ–Ω–Ω—ã–π —Ñ–∞–π–ª —Å –Ω–æ–≤—ã–º —Å–æ–¥–µ—Ä–∂–∏–º—ã–º
          cat > temp_cards.js << 'EOF'
const cards = [
  {
    title: "Moon today",
    content: `$MOON_TODAY_PLACEHOLDER`
  },
  {
    title: "Moon Phase Dream Dictionary", 
    content: `$MOON_DREAM_PLACEHOLDER`
  },
  {
    title: "Daily inspiration",
    content: `$INSPIRATION_PLACEHOLDER`
  }
];

let currentIndex = 0;

function updateCard() {
  const titleElement = document.getElementById("card-title");
  const contentElement = document.getElementById("card-content");
  
  if (titleElement && contentElement && cards[currentIndex]) {
    titleElement.textContent = cards[currentIndex].title;
    contentElement.innerHTML = cards[currentIndex].content.replace(/\n/g, '<br>');
    
    // –î–æ–±–∞–≤–ª—è–µ–º –ø–ª–∞–≤–Ω—ã–π —ç—Ñ—Ñ–µ–∫—Ç –ø—Ä–∏ —Å–º–µ–Ω–µ –∫–∞—Ä—Ç–æ—á–∫–∏
    const card = document.getElementById("carousel-card");
    card.style.opacity = '0.7';
    setTimeout(() => {
      card.style.opacity = '1';
    }, 200);
  }
}

function nextCard() {
  currentIndex = (currentIndex + 1) % cards.length;
  updateCard();
}

function prevCard() {
  currentIndex = (currentIndex - 1 + cards.length) % cards.length;
  updateCard();
}

// –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ —Å—Ç—Ä–∞–Ω–∏—Ü—ã
document.addEventListener('DOMContentLoaded', function() {
  updateCard();
  
  // –ü–æ–¥–¥–µ—Ä–∂–∫–∞ –∫–ª–∞–≤–∏–∞—Ç—É—Ä—ã
  document.addEventListener('keydown', function(event) {
    if (event.key === 'ArrowLeft') {
      prevCard();
    } else if (event.key === 'ArrowRight') {
      nextCard();
    }
  });
});
EOF
          
          # –ü–æ–¥—Å—Ç–∞–≤–ª—è–µ–º –¥–∞–Ω–Ω—ã–µ
          sed -i "s|\$MOON_TODAY_PLACEHOLDER|$MOON_TODAY|g" temp_cards.js
          sed -i "s|\$MOON_DREAM_PLACEHOLDER|$MOON_DREAM|g" temp_cards.js  
          sed -i "s|\$INSPIRATION_PLACEHOLDER|$INSPIRATION|g" temp_cards.js
          
          # –ó–∞–º–µ–Ω—è–µ–º —Ñ–∞–π–ª
          mv temp_cards.js "$JS_FILE"
          
          echo "‚úÖ JavaScript file updated"
          
      - name: Update timestamp in HTML
        run: |
          TIMESTAMP=$(date -u '+%Y-%m-%d %H:%M UTC')
          sed -i "s|<title>Lunar Majesty</title>|<title>Lunar Majesty - Updated $TIMESTAMP</title>|g" index.html
          echo "‚úÖ HTML timestamp updated"
          
      - name: Commit and push changes
        run: |
          git config --local user.email "lunar-bot@github.com"
          git config --local user.name "Lunar Majesty Bot"
          
          # –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ –∏–∑–º–µ–Ω–µ–Ω–∏–π
          if git diff --quiet; then
            echo "üìÑ No changes detected"
            exit 0
          fi
          
          echo "üìù Changes detected, committing..."
          git add .
          git commit -m "üåô Auto-update lunar data $(date +'%Y-%m-%d %H:%M UTC')"
          git push origin main
          
          echo "‚úÖ Changes successfully pushed to repository"
