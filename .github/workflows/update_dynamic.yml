name: Update Dynamic Content on Site

on:
  workflow_run:
    workflows: ["Moon Data Parser and Processor"]
    types:
      - completed
  workflow_dispatch:

jobs:
  get-latest-artifact:
    runs-on: ubuntu-latest
    outputs:
      run_id: ${{ steps.fetch.outputs.run_id }}
    steps:
      - name: Checkout repo
        uses: actions/checkout@v4
        with:
          token: ${{ secrets.PAT_FOR_LUNAR_MAJESTY_DATA_UPDATE }}
        
      - name: Get latest successful run ID of parser workflow
        id: fetch
        run: |
          echo "📡 Fetching latest successful run ID..."
          run_id=$(gh run list --workflow="parse+process.yml" --branch=main --json databaseId,status,conclusion --jq '[.[] | select(.status=="completed" and .conclusion=="success")][0].databaseId')
          if [ -z "$run_id" ] || [ "$run_id" = "null" ]; then
            echo "❌ No successful run found"
            exit 1
          fi
          echo "Found run_id=$run_id"
          echo "run_id=$run_id" >> "$GITHUB_OUTPUT"
        env:
          GH_TOKEN: ${{ secrets.PAT_FOR_LUNAR_MAJESTY_DATA_UPDATE }}

  update-site-content:
    needs: get-latest-artifact
    runs-on: ubuntu-latest
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
        with:
          token: ${{ secrets.PAT_FOR_LUNAR_MAJESTY_DATA_UPDATE }}
          
      - name: Download artifact from previous run
        uses: dawidd6/action-download-artifact@v4
        with:
          workflow: parse+process.yml
          run_id: ${{ needs.get-latest-artifact.outputs.run_id }}
          name: moon-data-processed
          path: ./artifacts
          
      - name: Verify artifact contents
        run: |
          echo "📁 Verifying artifact contents..."
          if [ -f "./artifacts/moon_data_processed.json" ]; then
            echo "✅ Artifact found"
            cat ./artifacts/moon_data_processed.json | jq . | head -20
          else
            echo "❌ Artifact file not found!"
            ls -la ./artifacts/
            exit 1
          fi
          
      - name: Create update script
        run: |
          cat > update_content.py << 'SCRIPT_END'
          import json
          import re
          from datetime import datetime
          
          print("🔍 Reading JSON data from artifacts...")
          
          # Читаем JSON данные
          with open('./artifacts/moon_data_processed.json', 'r', encoding='utf-8') as f:
              data = json.load(f)
          
          print("📊 JSON data loaded successfully")
          print("🌙 Extracting moon data...")
          
          # Извлекаем данные из JSON структуры
          moon_today_data = data['moon_today']['moon_today']
          moon_today = f"{moon_today_data['current_time']}\n🌙 Phase: {moon_today_data['moon_phase_tonight']}\nNew Moon: {moon_today_data['new_moon']}\nFirst Quarter: {moon_today_data['first_quarter']}"
          
          moon_dream = data['moon_dream']['moon_dream']['time_translated']
          
          inspiration_data = data['inspiration']['inspiration']
          inspiration = f"{inspiration_data['content']}\n\n— {inspiration_data['author']}"
          
          print(f"✅ Extracted data:")
          print(f"  - Moon today: {moon_today_data['current_time']} - {moon_today_data['moon_phase_tonight']}")
          print(f"  - Dream interpretation: {moon_dream[:50]}...")
          print(f"  - Inspiration: {inspiration_data['content'][:50]}...")
          
          print("📝 Creating JavaScript content...")
          
          # Создаем JavaScript контент с реальными данными из JSON
          js_content = f'''const cards = [
            {{
              title: "Moon today",
              content: {json.dumps(moon_today)}
            }},
            {{
              title: "Moon Phase Dream Dictionary", 
              content: {json.dumps(moon_dream)}
            }},
            {{
              title: "Daily inspiration",
              content: {json.dumps(inspiration)}
            }}
          ];
          
          let currentIndex = 0;
          
          function updateCard() {{
            const titleElement = document.getElementById("card-title");
            const contentElement = document.getElementById("card-content");
            
            if (titleElement && contentElement && cards[currentIndex]) {{
              titleElement.textContent = cards[currentIndex].title;
              contentElement.innerHTML = cards[currentIndex].content.replace(/\\n/g, '<br>');
              
              const card = document.getElementById("carousel-card");
              card.style.opacity = '0.7';
              setTimeout(() => {{
                card.style.opacity = '1';
              }}, 200);
            }}
          }}
          
          function nextCard() {{
            currentIndex = (currentIndex + 1) % cards.length;
            updateCard();
          }}
          
          function prevCard() {{
            currentIndex = (currentIndex - 1 + cards.length) % cards.length;
            updateCard();
          }}
          
          document.addEventListener('DOMContentLoaded', function() {{
            updateCard();
            
            document.addEventListener('keydown', function(event) {{
              if (event.key === 'ArrowLeft') {{
                prevCard();
              }} else if (event.key === 'ArrowRight') {{
                nextCard();
              }}
            }});
          }});'''
          
          print("💾 Writing JavaScript file...")
          # Записываем JavaScript файл с реальными данными
          with open('js/lunar_majesty.js', 'w', encoding='utf-8') as f:
              f.write(js_content)
          
          print("🕒 Updating HTML timestamp...")
          # Обновляем HTML с timestamp
          timestamp = datetime.utcnow().strftime('%Y-%m-%d %H:%M UTC')
          with open('index.html', 'r', encoding='utf-8') as f:
              html_content = f.read()
          
          html_content = re.sub(r'<title>Lunar Majesty.*?</title>', f'<title>Lunar Majesty - Updated {timestamp}</title>', html_content)
          
          with open('index.html', 'w', encoding='utf-8') as f:
              f.write(html_content)
          
          print("✅ All files updated successfully with fresh lunar data!")
          print(f"📅 Update timestamp: {timestamp}")
          SCRIPT_END
          
      - name: Run update script
        run: python3 update_content.py
          
      - name: Commit and push changes
        run: |
          git config --local user.email "lunar-bot@github.com"
          git config --local user.name "Lunar Majesty Bot"
          if git diff --quiet; then
            echo "📄 No changes detected"
            exit 0
          fi
          echo "📝 Changes detected, committing..."
          git add .
          git commit -m "🌙 Auto-update lunar data $(date +'%Y-%m-%d %H:%M UTC')"
          git push origin main
          echo "✅ Changes successfully pushed to repository"
