name: Moon Data Parser and Processor

# CI/CD workflow for daily updates of https://rumiantsevaa.github.io/lunar_majesty/ data on GitHub Pages 
# GitHub Actions runner (works as master node) scrapes raw moon data - parse_data.py
# (Acts as GA worker that controls the how GA enviroment gets the data, how it's parsed and saves it in GA workflow artifacts.) 
# Raw data is sent to PythonAnywhere (PA) node that acts as enviroment for data processing - bot_launcher.py 
# (Acts as GA worker that controls the how PA enviroment gets the data, how it's processed and saves it in GA workflow artifacts.) 
# GA worker commits processed data to repo (triggering Pages rebuild daily)


on:
  workflow_dispatch: 
  schedule:
    - cron: '0 0 * * *' 
    - cron: '0 12 * * *'  
    - cron: '0 15 * * *' 
    
jobs:
  parse-and-process: 
    runs-on: ubuntu-latest  # Primary worker node
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: "3.10"

      - name: Install dependencies
        run: pip install -r requirements.txt

      - name: Verify and setup ChromeDriver
        run: |
          if [ ! -f "./matching_chrome_driver/chromedriver" ]; then
            echo "‚ùå ChromeDriver not found at ./matching_chrome_driver/chromedriver"
            exit 1
          fi
          
          chmod +x ./matching_chrome_driver/chromedriver
          
          echo "üìã ChromeDriver info:"
          ls -la ./matching_chrome_driver/chromedriver
          CHROMEDRIVER_VERSION=$(./matching_chrome_driver/chromedriver --version | grep -oP '\d+\.\d+\.\d+\.\d+')
          echo "ChromeDriver version: $CHROMEDRIVER_VERSION"
          
          echo "üìã System Chrome version:"
          CHROME_VERSION=$(google-chrome --version | grep -oP '\d+\.\d+\.\d+\.\d+' || echo "unknown")
          echo "Chrome version: $CHROME_VERSION"
          
          REQUIRED_CHROME_MAJOR=$(echo "$CHROMEDRIVER_VERSION" | cut -d. -f1)
          CURRENT_CHROME_MAJOR=$(echo "$CHROME_VERSION" | cut -d. -f1)
          
          echo "Required Chrome major version: $REQUIRED_CHROME_MAJOR"
          echo "Current Chrome major version: $CURRENT_CHROME_MAJOR"
          
          if [ "$REQUIRED_CHROME_MAJOR" != "$CURRENT_CHROME_MAJOR" ]; then
            echo "üîÑ Chrome version mismatch. Updating Chrome to version $REQUIRED_CHROME_MAJOR..."
            
            wget -q -O - https://dl.google.com/linux/linux_signing_key.pub | sudo apt-key add -
            echo "deb [arch=amd64] http://dl.google.com/linux/chrome/deb/ stable main" | sudo tee /etc/apt/sources.list.d/google-chrome.list
            sudo apt-get update
            
            if sudo apt-get install -y google-chrome-stable; then
              echo "‚úÖ Chrome updated successfully"
            else
              echo "‚ö†Ô∏è Failed to update Chrome via apt, trying manual download..."
              CHROME_URL="https://dl.google.com/linux/chrome/deb/pool/main/g/google-chrome-stable/google-chrome-stable_${REQUIRED_CHROME_MAJOR}.0.0.0-1_amd64.deb"
              if wget -q "$CHROME_URL" -O chrome.deb; then
                sudo dpkg -i chrome.deb || sudo apt-get install -f -y
                echo "‚úÖ Chrome installed manually"
              else
                echo "‚ùå Failed to download Chrome $REQUIRED_CHROME_MAJOR"
              fi
            fi
            
            echo "üîÅ Rechecking Chrome version after update:"
            google-chrome --version
          else
            echo "‚úÖ Chrome version matches ChromeDriver"
          fi
          
          echo "üßπ Clearing undetected_chromedriver cache..."
          rm -rf ~/.undetected_chromedriver/ || true
          rm -rf /tmp/.com.google.Chrome* || true
          
          export PATH="$(pwd)/matching_chrome_driver:$PATH"
          echo "üîç PATH set to include local ChromeDriver: $(pwd)/matching_chrome_driver"
          
          WHICH_DRIVER=$(which chromedriver)
          echo "üß≠ chromedriver resolved to: $WHICH_DRIVER"
          SYSTEM_DRIVER_VERSION=$($WHICH_DRIVER --version | grep -oP '\d+\.\d+\.\d+\.\d+')
          SYSTEM_DRIVER_MAJOR=$(echo "$SYSTEM_DRIVER_VERSION" | cut -d. -f1)
          echo "üìã System chromedriver version: $SYSTEM_DRIVER_VERSION"
          
          if [ "$SYSTEM_DRIVER_MAJOR" != "$REQUIRED_CHROME_MAJOR" ]; then
            echo "‚ö†Ô∏è System chromedriver still not matching, overriding /usr/bin/chromedriver..."
            sudo cp ./matching_chrome_driver/chromedriver /usr/bin/chromedriver
            sudo chmod +x /usr/bin/chromedriver
            echo "‚úÖ Overridden /usr/bin/chromedriver with correct version"
            
            echo "üîÅ Rechecking system chromedriver:"
            /usr/bin/chromedriver --version
          else
            echo "‚úÖ System chromedriver is already correct"
          fi
          
          echo "‚úÖ ChromeDriver configured and version verified"


      - name: Run and save parser output
        env:
          CHROMEDRIVER_PATH: "./matching_chrome_driver/chromedriver"
        run: |
          echo "üöÄ Starting parser with ChromeDriver: $CHROMEDRIVER_PATH"
          python parse_data.py > moon_data.json
          echo "‚úÖ Raw moon data collected in moon_data.json"
          ls -la moon_data.json
          head -c 200 moon_data.json

      - name: Read JSON to env var
        id: json
        run: |
          if ! python3 -c "import json; json.load(open('moon_data.json'))" 2>/dev/null; then
            echo "‚ùå Invalid JSON in moon_data.json"
            cat moon_data.json
            exit 1
          fi
          
          CONTENT=$(cat moon_data.json | python3 -c 'import json,sys; print(json.dumps(json.load(sys.stdin)))')
          echo "MOON_JSON=$CONTENT" >> $GITHUB_ENV
          echo "‚úÖ JSON data loaded into environment variable"

      - name: Verify and setup ChromeDriver for bot
        run: |
          if [ ! -f "./matching_chrome_driver/chromedriver" ]; then
            echo "‚ùå ChromeDriver not found at ./matching_chrome_driver/chromedriver"
            exit 1
          fi
          
          chmod +x ./matching_chrome_driver/chromedriver
          
          echo "üìã ChromeDriver info:"
          ls -la ./matching_chrome_driver/chromedriver
          CHROMEDRIVER_VERSION=$(./matching_chrome_driver/chromedriver --version | grep -oP '\d+\.\d+\.\d+\.\d+')
          echo "ChromeDriver version: $CHROMEDRIVER_VERSION"
          
          echo "üìã System Chrome version:"
          CHROME_VERSION=$(google-chrome --version | grep -oP '\d+\.\d+\.\d+\.\d+' || echo "unknown")
          echo "Chrome version: $CHROME_VERSION"
          
          REQUIRED_CHROME_MAJOR=$(echo "$CHROMEDRIVER_VERSION" | cut -d. -f1)
          CURRENT_CHROME_MAJOR=$(echo "$CHROME_VERSION" | cut -d. -f1)
          
          echo "Required Chrome major version: $REQUIRED_CHROME_MAJOR"
          echo "Current Chrome major version: $CURRENT_CHROME_MAJOR"
          
          if [ "$REQUIRED_CHROME_MAJOR" != "$CURRENT_CHROME_MAJOR" ]; then
            echo "üîÑ Chrome version mismatch. Updating Chrome to version $REQUIRED_CHROME_MAJOR..."
            
            wget -q -O - https://dl.google.com/linux/linux_signing_key.pub | sudo apt-key add -
            echo "deb [arch=amd64] http://dl.google.com/linux/chrome/deb/ stable main" | sudo tee /etc/apt/sources.list.d/google-chrome.list
            sudo apt-get update
            sudo apt-get install -y google-chrome-stable
            
            echo "‚úÖ Chrome updated successfully"
          else
            echo "‚úÖ Chrome version matches ChromeDriver"
          fi

          echo "üßπ Clearing undetected_chromedriver cache..."
          rm -rf ~/.undetected_chromedriver/ || true
          rm -rf /tmp/.com.google.Chrome* || true
          
          export PATH="$(pwd)/matching_chrome_driver:$PATH"
          which chromedriver
          chromedriver --version
          echo "‚úÖ ChromeDriver configured and version verified"

      - name: Final Chrome version check and force override if mismatch
        run: |
          echo "üîç Final Chrome check:"
          GOOGLE_VERSION=$(google-chrome --version | grep -oP '\d+\.\d+\.\d+\.\d+')
          CHROME_MAJOR=$(echo "$GOOGLE_VERSION" | cut -d. -f1)
          echo "Google Chrome $GOOGLE_VERSION"

          INSTALLED_DRIVER_VERSION=$(chromedriver --version | grep -oP '\d+\.\d+\.\d+\.\d+')
          DRIVER_MAJOR=$(echo "$INSTALLED_DRIVER_VERSION" | cut -d. -f1)
          echo "ChromeDriver $INSTALLED_DRIVER_VERSION"

          REQUIRED_DRIVER_PATH="./matching_chrome_driver/chromedriver"
          REQUIRED_DRIVER_VERSION=$($REQUIRED_DRIVER_PATH --version | grep -oP '\d+\.\d+\.\d+\.\d+')
          REQUIRED_DRIVER_MAJOR=$(echo "$REQUIRED_DRIVER_VERSION" | cut -d. -f1)
          echo "Expected ChromeDriver $REQUIRED_DRIVER_VERSION"

          if [ "$CHROME_MAJOR" != "$REQUIRED_DRIVER_MAJOR" ] || [ "$DRIVER_MAJOR" != "$REQUIRED_DRIVER_MAJOR" ]; then
            echo "‚ö†Ô∏è ChromeDriver mismatch detected!"
            echo "üöß Overriding system chromedriver with bundled one..."

            sudo cp "$REQUIRED_DRIVER_PATH" /usr/bin/chromedriver
            sudo chmod +x /usr/bin/chromedriver
            echo "‚úÖ System chromedriver successfully overridden."

            echo "üîÅ Rechecking versions after override..."
            chromedriver --version
          else
            echo "‚úÖ Chrome and ChromeDriver versions match. No override needed."
          fi

      - name: Launch bot with Selenium
        env:
          PA_USERNAME: ${{ secrets.PA_USERNAME }}
          PA_PASSWORD: ${{ secrets.PA_PASSWORD }}
          MOON_JSON: ${{ env.MOON_JSON }}
          CHROMEDRIVER_PATH: "./matching_chrome_driver/chromedriver"
        run: |
          echo "üöÄ Launching a selenium controller bot..."
          echo "üìã Using ChromeDriver: $(which chromedriver)"
          
          pkill -f chrome || true
          pkill -f google-chrome || true
          sleep 2
          
          python bot_launcher.py

      - name: Verify processed file
        run: |
          if [ -f "moon_data_processed.json" ]; then
            echo "‚úÖ The processed file was created successfully!"
            echo "üìä File size: $(wc -c < moon_data_processed.json) bytes"
            if python3 -c "import json; json.load(open('moon_data_processed.json'))" 2>/dev/null; then
              echo "‚úÖ JSON is valid"
            else
              echo "‚ùå Invalid JSON in processed file"
              exit 1
            fi
            echo "üìù First 200 characters:"
            head -c 200 moon_data_processed.json
            echo ""
            echo "..."
          else
            echo "‚ùå Processed file not found"
            ls -la *.json || echo "No JSON files"
            exit 1
          fi

      - name: Upload processed result
        uses: actions/upload-artifact@v4
        with:
          name: moon-data-processed
          path: |
            moon_data.json
            moon_data_processed.json
          retention-days: 30

      - name: Show final status
        if: always()
        run: |
          echo "üìã Final status for attempt 1:"
          ls -la *.json || echo "No JSON files"
          if [ -f "moon_data_processed.json" ]; then
            echo "‚úÖ Processing completed successfully!"
          else
            echo "‚ö†Ô∏è The processed file was not created."
          fi
          
