name: Moon Data Parser and Processor

# CI/CD workflow for daily updates of https://rumiantsevaa.github.io/lunar_majesty/ data on GitHub Pages 

# GitHub Actions runner (works as master node) scrapes raw moon data - parse_data.py
# (Acts as GA worker that controls the how GA enviroment gets the data, how it's parsed and saves it in GA workflow artifacts.) 

# Raw data is sent to PythonAnywhere (PA) node that acts as enviroment for data processing - bot_launcher.py 
# (Acts as GA worker that controls the how PA enviroment gets the data, how it's processed and saves it in GA workflow artifacts.) 

# Future implementation: GA worker commits processed data to repo (triggering Pages rebuild daily)

on:
  workflow_dispatch: 
  schedule:
    - cron: '0 0 * * *' 
    
jobs:
  parse-and-process:
    runs-on: ubuntu-latest  # Primary worker node
    timeout-minutes: 30

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: "3.10"

      - name: Install dependencies
        run: |
          pip install -r requirements.txt

      - name: Run parser with retry logic
        run: |
          echo "üöÄ Starting data parsing with retry mechanism..."
          
          MAX_RETRIES=3
          RETRY_COUNT=0
          SUCCESS=false
          
          while [ $RETRY_COUNT -lt $MAX_RETRIES ] && [ "$SUCCESS" = false ]; do
            echo "üîÑ Parse attempt $((RETRY_COUNT + 1))/$MAX_RETRIES"
            
            if python parse_data.py > moon_data.json 2> parse_error.log; then
              if [ -s moon_data.json ]; then
                echo "‚úÖ Raw moon data collected successfully"
                ls -la moon_data.json
                head -c 200 moon_data.json
                SUCCESS=true
              else
                echo "‚ùå Empty JSON file created"
                RETRY_COUNT=$((RETRY_COUNT + 1))
                [ $RETRY_COUNT -lt $MAX_RETRIES ] && sleep $((RETRY_COUNT * 10))
              fi
            else
              echo "‚ùå Parse attempt $((RETRY_COUNT + 1)) failed:"
              cat parse_error.log
              RETRY_COUNT=$((RETRY_COUNT + 1))
              [ $RETRY_COUNT -lt $MAX_RETRIES ] && sleep $((RETRY_COUNT * 10))
            fi
          done
          
          if [ "$SUCCESS" = false ]; then
            echo "üí• All parse attempts failed"
            exit 1
          fi

      - name: Read JSON to env var
        id: json
        run: |
          CONTENT=$(cat moon_data.json | python3 -c 'import json,sys; print(json.dumps(json.load(sys.stdin)))')
          echo "MOON_JSON=$CONTENT" >> $GITHUB_ENV
          echo "‚úÖ JSON data loaded into environment variable"

      - name: Launch bot with retry logic
        env:
          PA_USERNAME: ${{ secrets.PA_USERNAME }}
          PA_PASSWORD: ${{ secrets.PA_PASSWORD }}
          MOON_JSON: ${{ env.MOON_JSON }}
        run: |
          echo "üöÄ Starting PythonAnywhere bot with retry mechanism..."
          
          MAX_RETRIES=3
          RETRY_COUNT=0
          SUCCESS=false
          
          while [ $RETRY_COUNT -lt $MAX_RETRIES ] && [ "$SUCCESS" = false ]; do
            echo "üîÑ Bot attempt $((RETRY_COUNT + 1))/$MAX_RETRIES"
            
            if python bot_launcher.py 2> bot_error.log; then
              if [ -f "moon_data_processed.json" ] && [ -s "moon_data_processed.json" ]; then
                echo "‚úÖ Bot processing completed successfully"
                SUCCESS=true
              else
                echo "‚ùå Processed file not created or empty"
                RETRY_COUNT=$((RETRY_COUNT + 1))
                [ $RETRY_COUNT -lt $MAX_RETRIES ] && sleep $((RETRY_COUNT * 15))
              fi
            else
              echo "‚ùå Bot attempt $((RETRY_COUNT + 1)) failed:"
              cat bot_error.log
              RETRY_COUNT=$((RETRY_COUNT + 1))
              [ $RETRY_COUNT -lt $MAX_RETRIES ] && sleep $((RETRY_COUNT * 15))
            fi
          done
          
          if [ "$SUCCESS" = false ]; then
            echo "üí• All bot attempts failed"
            exit 1
          fi

      - name: Verify processed file
        run: |
          if [ -f "moon_data_processed.json" ]; then
            echo "‚úÖ The processed file was created successfully!"
            echo "üìä File size: $(wc -c < moon_data_processed.json) bytes"
            echo "üìù First 200 characters:"
            head -c 200 moon_data_processed.json
            echo ""
            echo "..."
            
            # Verify JSON is valid
            if python3 -c "import json; json.load(open('moon_data_processed.json'))" 2>/dev/null; then
              echo "‚úÖ JSON file is valid"
            else
              echo "‚ùå JSON file is invalid"
              exit 1
            fi
          else
            echo "‚ùå Processed file not found"
            ls -la *.json || echo "No JSON files"
            exit 1
          fi

      - name: Upload processed result
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: moon-data-processed
          path: |
            moon_data.json
            moon_data_processed.json
          retention-days: 30

      - name: Show final status
        if: always()
        run: |
          echo "üìã Final status:"
          ls -la *.json || echo "No JSON files"
          if [ -f "moon_data_processed.json" ]; then
            echo "‚úÖ Processing completed successfully!"
          else
            echo "‚ö†Ô∏è The processed file was not created."
          fi
          echo "‚úÖ Workflow completed with retry mechanisms active. Waiting for the worker environment to complete post steps."
