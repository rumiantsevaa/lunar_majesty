name: Moon Data Parser and Processor

# CI/CD workflow for daily updates of https://rumiantsevaa.github.io/lunar_majesty/ data on GitHub Pages 

# GitHub Actions runner (works as master node) scrapes raw moon data - parse_data.py
# (Acts as GA worker that controls the how GA enviroment gets the data, how it's parsed and saves it in GA workflow artifacts.) 

# Raw data is sent to PythonAnywhere (PA) node that acts as enviroment for data processing - bot_launcher.py 
# (Acts as GA worker that controls the how PA enviroment gets the data, how it's processed and saves it in GA workflow artifacts.) 

# Future implementation: GA worker commits processed data to repo (triggering Pages rebuild daily)

on:
  workflow_dispatch: 
  schedule:
    - cron: '0 0 * * *' 
    
jobs:
  parse-and-process:
    runs-on: ubuntu-latest  # Primary worker node
    timeout-minutes: 30

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: "3.10"

      - name: Install dependencies
        run: |
          pip install -r requirements.txt

      - name: Run parser with retry logic
        run: |
          echo "üöÄ Starting data parsing with retry mechanism..."
          
          MAX_RETRIES=3
          RETRY_COUNT=0
          SUCCESS=false
          
          while [ $RETRY_COUNT -lt $MAX_RETRIES ] && [ "$SUCCESS" = false ]; do
            echo "üîÑ Parse attempt $((RETRY_COUNT + 1))/$MAX_RETRIES"
            
            rm -f moon_data.json parse_error.log
            
            if python parse_data.py > moon_data.json 2> parse_error.log; then
              if [ -f "moon_data.json" ] && [ -s "moon_data.json" ]; then
                if python3 -c "import json; json.load(open('moon_data.json'))" 2>/dev/null; then
                  echo "‚úÖ Raw moon data collected successfully"
                  echo "üìä File size: $(wc -c < moon_data.json) bytes"
                  echo "üìù Preview:"
                  head -c 300 moon_data.json
                  echo ""
                  SUCCESS=true
                else
                  echo "‚ùå Invalid JSON created"
                  echo "üìã File contents:"
                  cat moon_data.json
                  RETRY_COUNT=$((RETRY_COUNT + 1))
                  [ $RETRY_COUNT -lt $MAX_RETRIES ] && sleep $((RETRY_COUNT * 10))
                fi
              else
                echo "‚ùå Empty or missing JSON file created"
                RETRY_COUNT=$((RETRY_COUNT + 1))
                [ $RETRY_COUNT -lt $MAX_RETRIES ] && sleep $((RETRY_COUNT * 10))
              fi
            else
              echo "‚ùå Parse attempt $((RETRY_COUNT + 1)) failed:"
              if [ -f "parse_error.log" ]; then
                cat parse_error.log
              fi
              if [ -f "moon_data.json" ]; then
                echo "üìã Partial output in moon_data.json:"
                cat moon_data.json
              fi
              RETRY_COUNT=$((RETRY_COUNT + 1))
              [ $RETRY_COUNT -lt $MAX_RETRIES ] && sleep $((RETRY_COUNT * 10))
            fi
          done
          
          if [ "$SUCCESS" = false ]; then
            echo "üí• All parse attempts failed"
            exit 1
          fi
          
          echo "‚úÖ Raw moon data collected in moon_data.json"
          ls -la moon_data.json

      - name: Read JSON to env var with validation
        id: json
        run: |
          echo "üìã Reading and validating JSON file..."
          
          if [ ! -f "moon_data.json" ]; then
            echo "‚ùå moon_data.json file not found"
            exit 1
          fi
          
          if [ ! -s "moon_data.json" ]; then
            echo "‚ùå moon_data.json file is empty"
            exit 1
          fi
          
          echo "üìä File size: $(wc -c < moon_data.json) bytes"
          echo "üìù First 200 characters:"
          head -c 200 moon_data.json
          echo ""
          
          CONTENT=$(python3 -c "
          import json
          import sys
          
          try:
              with open('moon_data.json', 'r', encoding='utf-8') as f:
                  data = json.load(f)
              print(json.dumps(data, ensure_ascii=False, separators=(',', ':')))
          except Exception as e:
              print(f'Error reading JSON: {e}', file=sys.stderr)
              sys.exit(1)
          ")
          
          if [ -z "$CONTENT" ]; then
            echo "‚ùå Failed to read JSON content"
            exit 1
          fi
          
          CONTENT="${CONTENT//'%'/'%25'}"
          CONTENT="${CONTENT//$'\n'/'%0A'}"
          CONTENT="${CONTENT//$'\r'/'%0D'}"
          
          echo "MOON_JSON=$CONTENT" >> $GITHUB_ENV
          echo "‚úÖ JSON data loaded into environment variable (${#CONTENT} characters)"

      - name: Launch bot with retry logic
        env:
          PA_USERNAME: ${{ secrets.PA_USERNAME }}
          PA_PASSWORD: ${{ secrets.PA_PASSWORD }}
          MOON_JSON: ${{ env.MOON_JSON }}
        run: |
          echo "üöÄ Launching selenium controller bot with retry mechanism..."
          
          MAX_RETRIES=3
          RETRY_COUNT=0
          SUCCESS=false
          
          while [ $RETRY_COUNT -lt $MAX_RETRIES ] && [ "$SUCCESS" = false ]; do
            echo "üîÑ Bot attempt $((RETRY_COUNT + 1))/$MAX_RETRIES"
            rm -f moon_data_processed.json bot_error.log
            
            if python bot_launcher.py 2> bot_error.log; then
              if [ -f "moon_data_processed.json" ] && [ -s "moon_data_processed.json" ]; then
                if python3 -c "import json; json.load(open('moon_data_processed.json'))" 2>/dev/null; then
                  echo "‚úÖ Bot processing completed successfully"
                  SUCCESS=true
                else
                  echo "‚ùå Invalid processed JSON created"
                  echo "üìã File contents:"
                  cat moon_data_processed.json
                  RETRY_COUNT=$((RETRY_COUNT + 1))
                  [ $RETRY_COUNT -lt $MAX_RETRIES ] && sleep $((RETRY_COUNT * 15))
                fi
              else
                echo "‚ùå Processed file not created or empty"
                RETRY_COUNT=$((RETRY_COUNT + 1))
                [ $RETRY_COUNT -lt $MAX_RETRIES ] && sleep $((RETRY_COUNT * 15))
              fi
            else
              echo "‚ùå Bot attempt $((RETRY_COUNT + 1)) failed:"
              if [ -f "bot_error.log" ]; then
                cat bot_error.log
              fi
              RETRY_COUNT=$((RETRY_COUNT + 1))
              [ $RETRY_COUNT -lt $MAX_RETRIES ] && sleep $((RETRY_COUNT * 15))
            fi
          done
          
          if [ "$SUCCESS" = false ]; then
            echo "üí• All bot attempts failed"
            exit 1
          fi

      - name: Verify processed file
        run: |
          if [ -f "moon_data_processed.json" ]; then
            echo "‚úÖ The processed file was created successfully!"
            echo "üìä File size: $(wc -c < moon_data_processed.json) bytes"
            echo "üìù First 200 characters:"
            head -c 200 moon_data_processed.json
            echo ""
            echo "..."
            
            if python3 -c "import json; data = json.load(open('moon_data_processed.json')); print(f'JSON valid with {len(data)} sections')" 2>/dev/null; then
              echo "‚úÖ JSON file is valid and properly structured"
            else
              echo "‚ö†Ô∏è JSON file might have issues"
            fi
          else
            echo "‚ùå Processed file not found"
            ls -la *.json || echo "No JSON files"
          fi

      - name: Upload processed result
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: moon-data-processed
          path: |
            moon_data.json
            moon_data_processed.json
          retention-days: 30

      - name: Show final status
        if: always()
        run: |
          echo "üìã Final status:"
          ls -la *.json || echo "No JSON files"
          if [ -f "moon_data_processed.json" ]; then
            echo "‚úÖ Processing completed successfully!"
          else
            echo "‚ö†Ô∏è The processed file was not created."
          fi
          echo "‚úÖ Workflow completed with retry mechanisms active. Waiting for the worker environment to complete post steps."
