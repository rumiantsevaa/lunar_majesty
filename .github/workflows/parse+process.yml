name: Moon Data Parser and Processor

# CI/CD workflow for daily updates of https://rumiantsevaa.github.io/lunar_majesty/ data on GitHub Pages 
# GitHub Actions runner (works as master node) scrapes raw moon data - parse_data.py
# (Acts as GA worker that controls the how GA enviroment gets the data, how it's parsed and saves it in GA workflow artifacts.) 
# Raw data is sent to PythonAnywhere (PA) node that acts as enviroment for data processing - bot_launcher.py 
# (Acts as GA worker that controls the how PA enviroment gets the data, how it's processed and saves it in GA workflow artifacts.) 
# Future implementation: GA worker commits processed data to repo (triggering Pages rebuild daily)

# This workflow performs up to 3 sequential attempts of parsing and processing moon data.
# Each attempt is a separate job (attempt1, attempt2, attempt3) linked via needs and if.
# Logic: attempt2 runs only if attempt1 fails (result == 'failure'), attempt3 runs only if attempt2 fails.
# The success/failure of an attempt is determined by the "Verify processed file" step:
#   - If moon_data_processed.json is found ‚Üí the job exits successfully (exit code 0).
#   - If the file is missing ‚Üí the job exits with an error (exit 1), triggering the next attempt.
# This ensures that if the first or second attempt succeeds, subsequent attempts are skipped
# and the workflow finishes early.

on:
  workflow_dispatch: 
  schedule:
    - cron: '0 0 * * *' 
    - cron: '0 12 * * *'  
    - cron: '0 15 * * *' 
    
jobs:
  parse-and-process-attempt1: 
    runs-on: ubuntu-latest  # Primary worker node
    timeout-minutes: 15
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: "3.10"

      - name: Install dependencies
        run: pip install -r requirements.txt

      - name: Verify and setup ChromeDriver
        run: |
          # –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ —Ñ–∞–π–ª–∞
          if [ ! -f "./matching_chrome_driver/chromedriver" ]; then
            echo "‚ùå ChromeDriver not found at ./matching_chrome_driver/chromedriver"
            exit 1
          fi
          
          # –î–µ–ª–∞–µ–º –∏—Å–ø–æ–ª–Ω—è–µ–º—ã–º
          chmod +x ./matching_chrome_driver/chromedriver
          
          # –ü—Ä–æ–≤–µ—Ä—è–µ–º –≤–µ—Ä—Å–∏—é ChromeDriver
          echo "üìã ChromeDriver info:"
          ls -la ./matching_chrome_driver/chromedriver
          CHROMEDRIVER_VERSION=$(./matching_chrome_driver/chromedriver --version | grep -oP '\d+\.\d+\.\d+\.\d+')
          echo "ChromeDriver version: $CHROMEDRIVER_VERSION"
          
          # –ü—Ä–æ–≤–µ—Ä—è–µ–º –≤–µ—Ä—Å–∏—é Chrome –≤ —Å–∏—Å—Ç–µ–º–µ
          echo "üìã System Chrome version:"
          CHROME_VERSION=$(google-chrome --version | grep -oP '\d+\.\d+\.\d+\.\d+' || echo "unknown")
          echo "Chrome version: $CHROME_VERSION"
          
          # –û–ø—Ä–µ–¥–µ–ª—è–µ–º –æ—Å–Ω–æ–≤–Ω—É—é –≤–µ—Ä—Å–∏—é Chrome –∏–∑ ChromeDriver
          REQUIRED_CHROME_MAJOR=$(echo "$CHROMEDRIVER_VERSION" | cut -d. -f1)
          CURRENT_CHROME_MAJOR=$(echo "$CHROME_VERSION" | cut -d. -f1)
          
          echo "Required Chrome major version: $REQUIRED_CHROME_MAJOR"
          echo "Current Chrome major version: $CURRENT_CHROME_MAJOR"
          
          # –ï—Å–ª–∏ –≤–µ—Ä—Å–∏–∏ –Ω–µ —Å–æ–≤–ø–∞–¥–∞—é—Ç, –æ–±–Ω–æ–≤–ª—è–µ–º Chrome
          if [ "$REQUIRED_CHROME_MAJOR" != "$CURRENT_CHROME_MAJOR" ]; then
            echo "üîÑ Chrome version mismatch. Updating Chrome to version $REQUIRED_CHROME_MAJOR..."
            
            # –û–±–Ω–æ–≤–ª—è–µ–º Chrome –¥–æ –Ω—É–∂–Ω–æ–π –≤–µ—Ä—Å–∏–∏
            wget -q -O - https://dl.google.com/linux/linux_signing_key.pub | sudo apt-key add -
            echo "deb [arch=amd64] http://dl.google.com/linux/chrome/deb/ stable main" | sudo tee /etc/apt/sources.list.d/google-chrome.list
            sudo apt-get update
            
            # –ü—ã—Ç–∞–µ–º—Å—è —É—Å—Ç–∞–Ω–æ–≤–∏—Ç—å –∫–æ–Ω–∫—Ä–µ—Ç–Ω—É—é –≤–µ—Ä—Å–∏—é Chrome
            if sudo apt-get install -y google-chrome-stable; then
              echo "‚úÖ Chrome updated successfully"
            else
              echo "‚ö†Ô∏è Failed to update Chrome via apt, trying manual download..."
              # Fallback - —Å–∫–∞—á–∏–≤–∞–µ–º –∫–æ–Ω–∫—Ä–µ—Ç–Ω—É—é –≤–µ—Ä—Å–∏—é
              CHROME_URL="https://dl.google.com/linux/chrome/deb/pool/main/g/google-chrome-stable/google-chrome-stable_${REQUIRED_CHROME_MAJOR}.0.0.0-1_amd64.deb"
              if wget -q "$CHROME_URL" -O chrome.deb; then
                sudo dpkg -i chrome.deb || sudo apt-get install -f -y
                echo "‚úÖ Chrome installed manually"
              else
                echo "‚ùå Failed to download Chrome $REQUIRED_CHROME_MAJOR"
              fi
            fi
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º –æ–±–Ω–æ–≤–ª–µ–Ω–Ω—É—é –≤–µ—Ä—Å–∏—é
            google-chrome --version
          else
            echo "‚úÖ Chrome version matches ChromeDriver"
          fi
          
          # –ü—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–æ –æ—á–∏—â–∞–µ–º –∫–µ—à undetected_chromedriver
          echo "üßπ Clearing undetected_chromedriver cache..."
          rm -rf ~/.undetected_chromedriver/ || true
          rm -rf /tmp/.com.google.Chrome* || true
          
          # –£–±–µ–∂–¥–∞–µ–º—Å—è —á—Ç–æ –∏—Å–ø–æ–ª—å–∑—É–µ–º –Ω–∞—à –¥—Ä–∞–π–≤–µ—Ä
          export PATH="$(pwd)/matching_chrome_driver:$PATH"
          which chromedriver
          chromedriver --version
          echo "‚úÖ ChromeDriver configured and version verified"

      - name: Run and save parser output
        env:
          # –ü—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–æ –∏—Å–ø–æ–ª—å–∑—É–µ–º –Ω–∞—à ChromeDriver
          CHROMEDRIVER_PATH: "./matching_chrome_driver/chromedriver"
        run: |
          echo "üöÄ Starting parser with ChromeDriver: $CHROMEDRIVER_PATH"
          python parse_data.py > moon_data.json
          echo "‚úÖ Raw moon data collected in moon_data.json"
          ls -la moon_data.json
          # –ü—Ä–æ–≤–µ—Ä–∏–º —Å–æ–¥–µ—Ä–∂–∏–º–æ–µ
          head -c 200 moon_data.json

      - name: Read JSON to env var
        id: json
        run: |
          # –ü—Ä–æ–≤–µ—Ä–∏–º –≤–∞–ª–∏–¥–Ω–æ—Å—Ç—å JSON
          if ! python3 -c "import json; json.load(open('moon_data.json'))" 2>/dev/null; then
            echo "‚ùå Invalid JSON in moon_data.json"
            cat moon_data.json
            exit 1
          fi
          
          CONTENT=$(cat moon_data.json | python3 -c 'import json,sys; print(json.dumps(json.load(sys.stdin)))')
          echo "MOON_JSON=$CONTENT" >> $GITHUB_ENV
          echo "‚úÖ JSON data loaded into environment variable"

      - name: Launch bot with Selenium
        env:
          PA_USERNAME: ${{ secrets.PA_USERNAME }}
          PA_PASSWORD: ${{ secrets.PA_PASSWORD }}
          MOON_JSON: ${{ env.MOON_JSON }}
          CHROMEDRIVER_PATH: "./matching_chrome_driver/chromedriver"
        run: |
          echo "üöÄ Launching a selenium controller bot for data processing in the PA node environment..."
          echo "üìã Using ChromeDriver: $CHROMEDRIVER_PATH"
          python bot_launcher.py

      - name: Verify processed file
        run: |
          if [ -f "moon_data_processed.json" ]; then
            echo "‚úÖ The processed file was created successfully!"
            echo "üìä File size: $(wc -c < moon_data_processed.json) bytes"
            
            # –ü—Ä–æ–≤–µ—Ä–∏–º –≤–∞–ª–∏–¥–Ω–æ—Å—Ç—å JSON
            if python3 -c "import json; json.load(open('moon_data_processed.json'))" 2>/dev/null; then
              echo "‚úÖ JSON is valid"
            else
              echo "‚ùå Invalid JSON in processed file"
              exit 1
            fi
            echo "üìù First 200 characters:"
            head -c 200 moon_data_processed.json
            echo ""
            echo "..."
          else
            echo "‚ùå Processed file not found"
            ls -la *.json || echo "No JSON files"
            exit 1
          fi

      - name: Upload processed result
        uses: actions/upload-artifact@v4
        with:
          name: moon-data-processed-attempt3
          path: |
            moon_data.json
            moon_data_processed.json
          retention-days: 30

      - name: Show final status
        if: always()
        run: |
          echo "üìã Final status for attempt 3:"
          ls -la *.json || echo "No JSON files"
          if [ -f "moon_data_processed.json" ]; then
            echo "‚úÖ Processing completed successfully!"
          else
            echo "‚ö†Ô∏è The processed file was not created."
          fi in processed file"
              head -c 500 moon_data_processed.json
              exit 1
            fi
            
            echo "üìù First 200 characters:"
            head -c 200 moon_data_processed.json
            echo ""
            echo "..."
          else
            echo "‚ùå Processed file not found"
            ls -la *.json || echo "No JSON files"
            exit 1
          fi

      - name: Upload processed result
        uses: actions/upload-artifact@v4
        with:
          name: moon-data-processed-attempt1
          path: |
            moon_data.json
            moon_data_processed.json
          retention-days: 30

      - name: Show final status
        if: always()
        run: |
          echo "üìã Final status for attempt 1:"
          ls -la *.json || echo "No JSON files"
          if [ -f "moon_data_processed.json" ]; then
            echo "‚úÖ Processing completed successfully!"
          else
            echo "‚ö†Ô∏è The processed file was not created."
          fi

  parse-and-process-attempt2:
    needs: parse-and-process-attempt1
    if: ${{ needs.parse-and-process-attempt1.result == 'failure' }}
    runs-on: ubuntu-latest
    timeout-minutes: 15
    steps:
      - name: Wait before retry
        run: |
          echo "‚è≥ Waiting 5 minutes before retry..."
          sleep 300

      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: "3.10"

      - name: Install dependencies
        run: pip install -r requirements.txt

      - name: Verify and setup ChromeDriver
        run: |
          if [ ! -f "./matching_chrome_driver/chromedriver" ]; then
            echo "‚ùå ChromeDriver not found at ./matching_chrome_driver/chromedriver"
            exit 1
          fi
          chmod +x ./matching_chrome_driver/chromedriver
          echo "üìã ChromeDriver info:"
          ls -la ./matching_chrome_driver/chromedriver
          ./matching_chrome_driver/chromedriver --version
          echo "‚úÖ ChromeDriver configured and version verified"

      - name: Run and save parser output
        env:
          CHROMEDRIVER_PATH: "./matching_chrome_driver/chromedriver"
        run: |
          echo "üöÄ Starting parser (attempt 2) with ChromeDriver: $CHROMEDRIVER_PATH"
          python parse_data.py > moon_data.json
          echo "‚úÖ Raw moon data collected in moon_data.json"
          ls -la moon_data.json

      - name: Read JSON to env var
        id: json
        run: |
          if ! python3 -c "import json; json.load(open('moon_data.json'))" 2>/dev/null; then
            echo "‚ùå Invalid JSON in moon_data.json"
            exit 1
          fi
          CONTENT=$(cat moon_data.json | python3 -c 'import json,sys; print(json.dumps(json.load(sys.stdin)))')
          echo "MOON_JSON=$CONTENT" >> $GITHUB_ENV
          echo "‚úÖ JSON data loaded into environment variable"

      - name: Launch bot with Selenium
        env:
          PA_USERNAME: ${{ secrets.PA_USERNAME }}
          PA_PASSWORD: ${{ secrets.PA_PASSWORD }}
          MOON_JSON: ${{ env.MOON_JSON }}
          CHROMEDRIVER_PATH: "./matching_chrome_driver/chromedriver"
        run: |
          echo "üöÄ Launching a selenium controller bot for data processing in the PA node environment (attempt 2)..."
          python bot_launcher.py

      - name: Verify processed file
        run: |
          if [ -f "moon_data_processed.json" ]; then
            echo "‚úÖ The processed file was created successfully!"
            echo "üìä File size: $(wc -c < moon_data_processed.json) bytes"
            if python3 -c "import json; json.load(open('moon_data_processed.json'))" 2>/dev/null; then
              echo "‚úÖ JSON is valid"
            else
              echo "‚ùå Invalid JSON in processed file"
              exit 1
            fi
            echo "üìù First 200 characters:"
            head -c 200 moon_data_processed.json
            echo ""
            echo "..."
          else
            echo "‚ùå Processed file not found"
            ls -la *.json || echo "No JSON files"
            exit 1
          fi

      - name: Upload processed result
        uses: actions/upload-artifact@v4
        with:
          name: moon-data-processed-attempt2
          path: |
            moon_data.json
            moon_data_processed.json
          retention-days: 30

      - name: Show final status
        if: always()
        run: |
          echo "üìã Final status for attempt 2:"
          ls -la *.json || echo "No JSON files"
          if [ -f "moon_data_processed.json" ]; then
            echo "‚úÖ Processing completed successfully!"
          else
            echo "‚ö†Ô∏è The processed file was not created."
          fi

  parse-and-process-attempt3:
    needs: parse-and-process-attempt2
    if: ${{ needs.parse-and-process-attempt2.result == 'failure' }}
    runs-on: ubuntu-latest
    timeout-minutes: 15
    steps:
      - name: Wait before final retry
        run: |
          echo "‚è≥ Waiting 10 minutes before final retry..."
          sleep 600

      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: "3.10"

      - name: Install dependencies
        run: pip install -r requirements.txt

      - name: Verify and setup ChromeDriver
        run: |
          if [ ! -f "./matching_chrome_driver/chromedriver" ]; then
            echo "‚ùå ChromeDriver not found at ./matching_chrome_driver/chromedriver"
            exit 1
          fi
          chmod +x ./matching_chrome_driver/chromedriver
          echo "üìã ChromeDriver info:"
          ls -la ./matching_chrome_driver/chromedriver
          ./matching_chrome_driver/chromedriver --version
          echo "‚úÖ ChromeDriver configured and version verified"

      - name: Run and save parser output
        env:
          CHROMEDRIVER_PATH: "./matching_chrome_driver/chromedriver"
        run: |
          echo "üöÄ Starting parser (final attempt) with ChromeDriver: $CHROMEDRIVER_PATH"
          python parse_data.py > moon_data.json
          echo "‚úÖ Raw moon data collected in moon_data.json"
          ls -la moon_data.json

      - name: Read JSON to env var
        id: json
        run: |
          if ! python3 -c "import json; json.load(open('moon_data.json'))" 2>/dev/null; then
            echo "‚ùå Invalid JSON in moon_data.json"
            exit 1
          fi
          CONTENT=$(cat moon_data.json | python3 -c 'import json,sys; print(json.dumps(json.load(sys.stdin)))')
          echo "MOON_JSON=$CONTENT" >> $GITHUB_ENV
          echo "‚úÖ JSON data loaded into environment variable"

      - name: Launch bot with Selenium
        env:
          PA_USERNAME: ${{ secrets.PA_USERNAME }}
          PA_PASSWORD: ${{ secrets.PA_PASSWORD }}
          MOON_JSON: ${{ env.MOON_JSON }}
          CHROMEDRIVER_PATH: "./matching_chrome_driver/chromedriver"
        run: |
          echo "üöÄ Launching a selenium controller bot for data processing in the PA node environment (final attempt)..."
          python bot_launcher.py

      - name: Verify processed file
        run: |
          if [ -f "moon_data_processed.json" ]; then
            echo "‚úÖ The processed file was created successfully!"
            echo "üìä File size: $(wc -c < moon_data_processed.json) bytes"
            if python3 -c "import json; json.load(open('moon_data_processed.json'))" 2>/dev/null; then
              echo "‚úÖ JSON is valid"
            else
              echo "‚ùå Invalid JSON
